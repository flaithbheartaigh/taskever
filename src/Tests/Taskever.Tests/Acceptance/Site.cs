using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// The drived classes in this file should be autogenerated
// From the cshtml site files using a gulp.js task

namespace Taskever.Tests.Acceptance
{
    public class Site
    {
        public static string BaseUrl{get;set;}
    }

    public abstract class SitePage: SiteControl
    {
        public SitePage(IWebDriver driver)
            : base(driver)
        {
        }
    }

    public abstract class SiteControl
    {
        protected IWebDriver driver;

        public abstract string Url
        {
            get;
        }

        public SiteControl(IWebDriver driver)
        {
            this.driver = driver;
        }

        public void Browse()
        {
            // if(driver.Url != Url)??
            driver.Url = Url;
        }

        protected void setInputValue(string id, string value)
        {
            var input = driver.FindElement(By.Id(id));
            input.SendKeys(value);
        }

        protected string getInputValue(string id)
        {
            var input = driver.FindElement(By.Id(id));
            return input.GetAttribute("value");
        }

        protected string getText(string id)
        {
            var element = driver.FindElement(By.Id(id));

            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));
            wait.Until(drv => element.Displayed);

            return element.Text;
        }

        protected IWebElement waitForElementAndReturn(By selector)
        {
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));
            wait.Until(drv => driver.FindElement(selector) != null);

            return driver.FindElement(selector);
        }
    }

    public class LoginPage: SitePage
	{
        private const string emailAddressID = "LoginEmailAddress";
        private const string passwordID = "LoginPassword";
        private const string loginErrorMessageID = "LoginErrorMessage";
        private const string forgotPasswordLinkText = "Forgot your password?";
        private const string forgotPasswordModalID = "PasswordResetLinkModal";
        private const string forgotPasswordEmailAddressID = "PasswordResetEmailAddress";
        private const string forgotPasswordSubmitID = "PasswordResetLinkModalSubmitButton";

        
        
		public override string Url
        {
            get { return Site.BaseUrl + "/Account/Login"; }
        }

        public string EmailAddress
        {
            get { return getInputValue(emailAddressID); }
            set { setInputValue(emailAddressID, value); }
        }

        public string Password
        {
            get { return getInputValue(passwordID); }
            set { setInputValue(passwordID, value); }
        }

        public string LoginErrorMessage
        {
            get { return getText(loginErrorMessageID); }
        }

        public IWebElement ForgotPasswordModal
        {
            get { return waitForElementAndReturn(By.Id(forgotPasswordModalID)); }
        }

        public IWebElement ForgotPassword
        {
            get { return waitForElementAndReturn(By.LinkText(forgotPasswordLinkText)); }
        }

        public IWebElement ForgotPasswordEmailAddress
        {
            get { return waitForElementAndReturn(By.LinkText(forgotPasswordEmailAddressID)); }
        }

        public IWebElement ForgotPasswordSubmit
        {
            get { return waitForElementAndReturn(By.LinkText(forgotPasswordSubmitID)); }
        }

        public LoginPage(IWebDriver driver)
            : base(driver)
        {
        }

        public void Login()
        {
            var submit = driver.FindElement(By.CssSelector("button[type='submit']"));
            submit.Click();
        }

    }

    public class RegisterPage: SitePage
    {
        public RegisterPage(IWebDriver driver)
            : base(driver)
        { }

        public override string Url
        {
            get { return Site.BaseUrl; }
        }
    }

    public class IndexPage : SitePage
    {
        public override string Url
        {
            get { return Site.BaseUrl; }
        }
        
        public IWebElement Taskever
        {
            get { return waitForElementAndReturn(By.LinkText("Taskever")); }
        }

        public IWebElement CreateNewTask
        {
            get { return waitForElementAndReturn(By.LinkText("Create new task")); }
        }

        public IWebElement MyProfile
        {
            get { return waitForElementAndReturn(By.LinkText("My Profile")); }
        }

        public IWebElement MyFriends
        {
            get { return waitForElementAndReturn(By.LinkText("My friends")); }
        }

        public IWebElement Settings
        {
            get { return waitForElementAndReturn(By.LinkText("Settings")); }
        }

        public IWebElement Logout
        {
            get { return waitForElementAndReturn(By.LinkText("Logout")); }
        }

        public IWebElement MainSection
        {
            get 
            {
                return waitForElementAndReturn(By.CssSelector("section[id]"));
            }
        }

        public IndexPage(IWebDriver driver)
            : base(driver)
        {
        }
    }

    public class CreateTaskControl : SiteControl
    {
        private const string title = "EditTaskTitle";
        private const string description = "EditTaskDescription";
        private const string priority = "EditTaskPriority";
        
        // select:
        private const string privacy = "EditTaskPrivacy";
        private const string assignedUserId = "NewTaskAssignedUserId";

        public override string Url
        {
            get { return Site.BaseUrl + "/#task/create"; }
        }

        public CreateTaskControl(IWebDriver driver)
            : base(driver)
        {

        }
    }
}